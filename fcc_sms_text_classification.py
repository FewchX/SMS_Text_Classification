# -*- coding: utf-8 -*-
"""fcc_sms_text_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mnpC2Ye2NPsz0vJrfmBotES1Xj8hIK0A
"""

# Commented out IPython magic to ensure Python compatibility.
# import libraries
try:
  # %tensorflow_version only exists in Colab.
  !pip install tf-nightly
except Exception:
  pass
import tensorflow as tf
import pandas as pd
from tensorflow import keras
!pip install tensorflow-datasets
import tensorflow_datasets as tfds
import numpy as np
import matplotlib.pyplot as plt
from keras.preprocessing import sequence

# %tensorflow_version 2.x  # this line is not required unless you are in a notebook
import os

vocab = {}
word_encoding = 1
def one_hot_encoding(text):
  global word_encoding

  words = text.lower().split(" ")
  encoding = []

  for word in words:
    if word in vocab:
      code = vocab[word]
      encoding.append(code)
    else:
      vocab[word] = word_encoding
      encoding.append(word_encoding)
      word_encoding += 1

  return encoding

text = "this is a test to see if this test will work is is test a a"
encoding = one_hot_encoding(text)
print(encoding)
print(vocab)

VOCAB_SIZE = 88584

MAXLEN = 250
BATCH_SIZE = 64

!wget https://cdn.freecodecamp.org/project-data/sms/train-data.tsv
!wget https://cdn.freecodecamp.org/project-data/sms/valid-data.tsv

train_file_path = "train-data.tsv"
test_file_path = "valid-data.tsv"

def split_dataset(dataset):
    labels = []
    messages = []
    for line in dataset.split('\n'):
        if line.strip():
            label, message = line.split('\t', 1)
            labels.append(1 if label.lower() == 'spam' else 0)
            messages.append(one_hot_encoding(message))
    return np.array(labels), messages

train_labels, train_data = split_dataset(open(train_file_path).read())
test_labels, test_data = split_dataset(open(test_file_path).read())

train_data = sequence.pad_sequences(train_data, MAXLEN)
test_data = sequence.pad_sequences(test_data, MAXLEN)

model = tf.keras.Sequential([
    tf.keras.layers.Embedding(VOCAB_SIZE, 32),
    tf.keras.layers.LSTM(32),
    tf.keras.layers.Dense(1, activation="sigmoid")
])

model.summary()

model.compile(loss="binary_crossentropy",optimizer="rmsprop",metrics=['acc'])

history = model.fit(train_data, train_labels, epochs=10, validation_split=0.2)

def predict_message(pred_text):

  pred_data = one_hot_encoding(pred_text)
  pred_data = sequence.pad_sequences([pred_data], MAXLEN)
  prediction = model.predict(pred_data)

  if prediction > 0.5:
    prediction = "spam"
  else:
    prediction = "ham"

  return prediction # Return the prediction and label


pred_text = "bro, i will go to shop tomorrow, can you go with me?"

prediction = predict_message(pred_text)
print(prediction)

# Run this cell to test your function and model. Do not modify contents.
def test_predictions():
  test_messages = ["how are you doing today",
                   "sale today! to stop texts call 98912460324",
                   "i dont want to go. can we try it a different day? available sat",
                   "our new mobile video service is live. just install on your phone to start watching.",
                   "you have won Â£1000 cash! call to claim your prize.",
                   "i'll bring it tomorrow. don't forget the milk.",
                   "wow, is your arm alright. that happened to me one time too"
                  ]

  test_answers = ["ham", "spam", "ham", "spam", "spam", "ham", "ham"]
  passed = True

  for msg, ans in zip(test_messages, test_answers):
    prediction = predict_message(msg)
    print("Expected: ", ans, "Prediction: ", prediction)
    if prediction != ans:
      passed = False

  if passed:
    print("You passed the challenge. Great job!")
  else:
    print("You haven't passed yet. Keep trying.")

test_predictions()